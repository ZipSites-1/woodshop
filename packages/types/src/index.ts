// Auto-generated by tools/codegen/generate-schema-types.mjs. DO NOT EDIT.

export interface AnalyzeGeometryInput {
  "include_primitives"?: boolean;
  "label"?: string;
  "seed"?: number;
  "source": {
    "data": string;
    "format": "step" | "iges";
  };
}

export interface AnalyzeGeometryOutput {
  "bounding_box": {
    "max": Array<number>;
    "min": Array<number>;
  };
  "dimensions": {
    "depth": number;
    "height": number;
    "width": number;
  };
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "inputs_hash": string;
  "label"?: string | null;
  "revision_id": string;
  "seed": number;
  "source_format": "step" | "iges";
  "surface_area": number;
  "triangle_count": number;
  "vertex_count": number;
}

export interface ApplyJoineryInput {
  "notes"?: string;
  "operations": Array<{
    "angle_deg"?: number | null;
    "depth_mm": number;
    "face": "interior" | "exterior" | "edge";
    "fasteners"?: Array<{
      "diameter_mm": number;
      "spacing_mm": number;
      "type": "screw" | "dowel" | "nail" | "biscuit";
    }>;
    "id"?: string;
    "length_mm": number;
    "metadata"?: {
      [key: string]: unknown;
    };
    "offset_mm": number;
    "primary_part_id": string;
    "secondary_part_id"?: string | null;
    "type": "dado" | "rabbet" | "mortise" | "tenon" | "lap" | "dowel";
    "width_mm": number;
  }>;
  "project_id": string;
  "seed"?: number;
}

export interface ApplyJoineryOutput {
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "impacted_parts": Array<string>;
  "inputs_hash": string;
  "operations": Array<{
    "features": Array<{
      "angle_deg": number | null;
      "depth_mm": number;
      "feature_type": "dado" | "rabbet" | "mortise" | "tenon" | "lap" | "dowel";
      "length_mm": number;
      "offset_mm": number;
      "part_id": string;
      "width_mm": number;
    }>;
    "operation_id": string;
    "preview_svg_path": string;
    "primary_part_id": string;
    "removed_volume_mm3": number;
    "secondary_part_id": string | null;
    "type": "dado" | "rabbet" | "mortise" | "tenon" | "lap" | "dowel";
    "warnings": Array<{
      "message": string;
      "part_id": string | null;
      "severity": "info" | "warning" | "critical";
    }>;
  }>;
  "project_id": string;
  "revision_id": string;
  "seed": number;
  "summary": string;
}

export interface CreateProjectInput {
  "seed"?: number;
  "template"?: string;
  "units": "mm" | "inch";
}

export interface CreateProjectOutput {
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "inputs_hash": string;
  "materials": Array<{
    "grain": string;
    "name": string;
    "thickness_mm": number;
  }>;
  "project_id": string;
  "revision_id": string;
  "seed": number;
  "template": string | null;
  "units": "mm" | "inch";
}

export interface ExportArtifactsInput {
  "destination"?: string;
  "format": "pdf" | "dxf" | "svg";
  "project_id": string;
  "revision_id"?: string;
  "seed"?: number;
}

export interface ExportArtifactsOutput {
  "artifact_path": string;
  "artifact_sha256": string;
  "bytes_written": number;
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "format": "pdf" | "dxf" | "svg";
  "inputs_hash": string;
  "project_id": string;
  "revision_id": string;
  "seed": number;
}

export interface ExtractCutlistInput {
  "project_id": string;
  "revision_id"?: string;
  "seed"?: number;
}

export interface ExtractCutlistOutput {
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "inputs_hash": string;
  "project_id": string;
  "revision_id": string;
  "rows": Array<{
    "grain": string;
    "length_mm": number;
    "material": string;
    "name": string;
    "part_id": string;
    "quantity": number;
    "thickness_mm": number;
    "width_mm": number;
  }>;
  "seed": number;
  "totals": {
    "material_totals": Array<{
      "count": number;
      "material": string;
    }>;
    "parts": number;
  };
}

export interface GenerateToolpathsInput {
  "operations": Array<{
    [key: string]: unknown;
  }>;
  "project_id": string;
  "safe_z_mm"?: number;
  "seed"?: number;
  "stock": {
    "length_mm": number;
    "origin": {
      "x_mm": number;
      "y_mm": number;
      "z_mm": number;
    };
    "thickness_mm": number;
    "width_mm": number;
  };
}

export interface GenerateToolpathsOutput {
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "inputs_hash": string;
  "preview_path": string;
  "program_id": string;
  "program_path": string;
  "project_id": string;
  "revision_id": string;
  "seed": number;
  "toolpaths": Array<{
    "estimated_runtime_sec": number;
    "length_mm": number;
    "operation_label": string;
    "operation_type": "contour" | "pocket" | "drill";
    "passes": number;
    "segments": Array<{
      "duration_sec": number | null;
      "feed_mm_per_min": number | null;
      "length_mm": number;
      "mode": "rapid" | "plunge" | "feed" | "dwell";
    }>;
    "tool": {
      "description"?: string;
      "diameter_mm": number;
      "flutes": number;
      "identifier"?: string;
      "type": "end_mill" | "ball_mill" | "drill";
    };
    "toolpath_id": string;
    "warnings": Array<{
      "message": string;
      "part_id": string | null;
      "severity": "info" | "warning" | "critical";
    }>;
  }>;
  "total_length_mm": number;
  "total_runtime_sec": number;
  "warnings": Array<{
    "message": string;
    "part_id": string | null;
    "severity": "info" | "warning" | "critical";
  }>;
}

export interface MakeDrawingInput {
  "explode"?: boolean;
  "include_dimensions"?: boolean;
  "project_id": string;
  "scale"?: number;
  "seed"?: number;
  "sheet_size"?: {
    "height_mm": number;
    "width_mm": number;
  };
  "title"?: string;
  "views": Array<"iso" | "front" | "back" | "left" | "right" | "top" | "bottom" | "section" | "exploded">;
}

export interface MakeDrawingOutput {
  "bytes_written": number;
  "drawing_path": string;
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "explode": boolean;
  "include_dimensions": boolean;
  "inputs_hash": string;
  "project_id": string;
  "revision_id": string;
  "scale": number;
  "seed": number;
  "sheet_size": {
    "height_mm": number;
    "width_mm": number;
  };
  "views": Array<{
    "dimensions": boolean;
    "name": string;
    "status": "generated" | "skipped";
  }>;
  "warnings": Array<{
    "message": string;
    "part_id": string | null;
    "severity": "info" | "warning" | "critical";
  }>;
}

export interface NestPartsInput {
  "grain_rule"?: "strict" | "relaxed";
  "kerf_mm"?: number;
  "parts": Array<{
    "allow_rotation"?: boolean;
    "length_mm": number;
    "part_id": string;
    "quantity": number;
    "width_mm": number;
  }>;
  "project_id": string;
  "seed"?: number;
  "stock": Array<{
    "length_mm": number;
    "quantity": number;
    "sheet_id": string;
    "width_mm": number;
  }>;
  "strategy"?: "skyline";
}

export interface NestPartsOutput {
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "inputs_hash": string;
  "layouts": Array<{
    "placements": Array<{
      "instance": number;
      "length_mm": number;
      "part_id": string;
      "rotation_deg": number;
      "width_mm": number;
      "x_mm": number;
      "y_mm": number;
    }>;
    "sheet_id": string;
    "sheet_index": number;
    "svg_path": string;
    "used_area_mm2": number;
    "utilization": number;
  }>;
  "not_placed": Array<string>;
  "offcuts": Array<{
    "area_mm2": number;
    "bounding_box_mm": {
      "length": number;
      "width": number;
    };
    "sheet_id": string;
  }>;
  "project_id": string;
  "revision_id": string;
  "seed": number;
  "strategy": string;
  "utilization_summary": {
    "overall_utilization": number;
    "total_parts_area_mm2": number;
    "total_stock_area_mm2": number;
  };
}

export interface ParamUpdateInput {
  "changes": Array<{
    "parameter": "width_mm" | "height_mm" | "depth_mm" | "shelf_count" | "door_style" | "back_panel";
    "reason"?: string;
    "value": number | string | boolean;
  }>;
  "constraints"?: {
    [key: string]: {
      "enum"?: Array<number | string | boolean>;
      "max"?: number;
      "min"?: number;
      "step"?: number;
    };
  };
  "current": {
    "back_panel": boolean;
    "depth_mm": number;
    "door_style": "slab" | "shaker" | "louver";
    "height_mm": number;
    "shelf_count": number;
    "width_mm": number;
  };
  "notes"?: string;
  "project_id": string;
  "revision_id"?: string;
  "seed"?: number;
}

export interface ParamUpdateOutput {
  "applied": Array<{
    "delta": number | null;
    "next_value": number | string | boolean;
    "parameter": "width_mm" | "height_mm" | "depth_mm" | "shelf_count" | "door_style" | "back_panel";
    "previous_value": number | string | boolean;
    "reason": string | null;
  }>;
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "inputs_hash": string;
  "next_parameters": {
    "back_panel": boolean;
    "depth_mm": number;
    "door_style": "slab" | "shaker" | "louver";
    "height_mm": number;
    "shelf_count": number;
    "width_mm": number;
  };
  "notes": string | null;
  "project_id": string;
  "rejected": Array<{
    "code": string;
    "message": string;
    "parameter": string;
    "requested_value": number | string | boolean;
  }>;
  "revision_id": string;
  "revision_tag": string;
  "seed": number;
  "warnings": Array<{
    "message": string;
    "part_id": string | null;
    "severity": "info" | "warning" | "critical";
  }>;
}

export interface PostprocessGrblInput {
  "confirm_write": true;
  "controller": "grbl";
  "destination"?: string;
  "program"?: {
    "program_id": string;
    "toolpaths": Array<{
      "estimated_runtime_sec": number;
      "length_mm": number;
      "operation_label": string;
      "operation_type": "contour" | "pocket" | "drill";
      "passes"?: number;
      "segments": Array<{
        "duration_sec": number | null;
        "feed_mm_per_min": number | null;
        "length_mm": number;
        "mode": "rapid" | "plunge" | "feed" | "dwell";
      }>;
      "tool": {
        "description"?: string;
        "diameter_mm": number;
        "flutes": number;
        "identifier"?: string;
        "type": "end_mill" | "ball_mill" | "drill";
      };
      "toolpath_id": string;
      "warnings"?: Array<{
        "message": string;
        "part_id": string | null;
        "severity": "info" | "warning" | "critical";
      }>;
    }>;
    "total_length_mm": number;
    "total_runtime_sec": number;
  };
  "program_path"?: string;
  "project_id": string;
  "seed"?: number;
}

export interface PostprocessGrblOutput {
  "bytes_written": number;
  "controller": "grbl";
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "gcode_path": string;
  "inputs_hash": string;
  "line_count": number;
  "project_id": string;
  "revision_id": string;
  "seed": number;
  "toolpath_stats": {
    "total_length_mm": number;
    "total_runtime_sec": number;
  };
  "warnings": Array<{
    "message": string;
    "part_id": string | null;
    "severity": "info" | "warning" | "critical";
  }>;
}

export interface WoodMovementCheckInput {
  "ambient": {
    "relative_humidity": number;
    "temperature_c": number;
  };
  "parts": Array<{
    "grain_axis": "length" | "width" | "thickness";
    "nominal_mm": {
      "length": number;
      "thickness": number;
      "width": number;
    };
    "part_id": string;
    "species": string;
  }>;
  "project_id": string;
  "seed"?: number;
}

export interface WoodMovementCheckOutput {
  "ambient": {
    "relative_humidity": number;
    "temperature_c": number;
  };
  "engine_versions": {
    "cam": string;
    "nest": string;
    "occt": string;
    "schemas": string;
    "wood": string;
  };
  "inputs_hash": string;
  "per_part": Array<{
    "delta_length_mm": number;
    "delta_thickness_mm": number;
    "delta_width_mm": number;
    "part_id": string;
    "species": string;
    "warning"?: string | null;
  }>;
  "project_id": string;
  "revision_id": string;
  "seed": number;
  "warnings": Array<{
    "message": string;
    "part_id": string | null;
    "severity": "info" | "warning" | "critical";
  }>;
}

export type WoodshopSharedDefinitions = {
  [key: string]: unknown;
};

export type ToolName = "analyze_geometry" | "apply_joinery" | "create_project" | "export_artifacts" | "extract_cutlist" | "generate_toolpaths" | "make_drawing" | "nest_parts" | "param_update" | "postprocess_grbl" | "wood_movement_check";

export interface ToolInputMap {
  "analyze_geometry": AnalyzeGeometryInput;
  "apply_joinery": ApplyJoineryInput;
  "create_project": CreateProjectInput;
  "export_artifacts": ExportArtifactsInput;
  "extract_cutlist": ExtractCutlistInput;
  "generate_toolpaths": GenerateToolpathsInput;
  "make_drawing": MakeDrawingInput;
  "nest_parts": NestPartsInput;
  "param_update": ParamUpdateInput;
  "postprocess_grbl": PostprocessGrblInput;
  "wood_movement_check": WoodMovementCheckInput;
}

export interface ToolOutputMap {
  "analyze_geometry": AnalyzeGeometryOutput;
  "apply_joinery": ApplyJoineryOutput;
  "create_project": CreateProjectOutput;
  "export_artifacts": ExportArtifactsOutput;
  "extract_cutlist": ExtractCutlistOutput;
  "generate_toolpaths": GenerateToolpathsOutput;
  "make_drawing": MakeDrawingOutput;
  "nest_parts": NestPartsOutput;
  "param_update": ParamUpdateOutput;
  "postprocess_grbl": PostprocessGrblOutput;
  "wood_movement_check": WoodMovementCheckOutput;
}

export type ProvenanceKey = "seed" | "engine_versions" | "revision_id" | "inputs_hash";
